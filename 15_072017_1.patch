Index: src/main/java/com/vsu/amm/medframe/component/mapper/impl/DeviceMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/vsu/amm/medframe/component/mapper/impl/DeviceMapper.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/component/mapper/impl/DeviceMapper.java	(revision )
@@ -1,7 +1,8 @@
 package com.vsu.amm.medframe.component.mapper.impl;
 
 import com.vsu.amm.medframe.component.mapper.Mapper;
-import com.vsu.amm.medframe.model.dto.DeviceDto;
+import com.vsu.amm.medframe.model.dto.DevicePointResponse;
+import com.vsu.amm.medframe.model.dto.DeviceResponse;
 import com.vsu.amm.medframe.model.entity.Device;
 import com.vsu.amm.medframe.model.entity.DevicePoint;
 import org.apache.log4j.Logger;
@@ -12,10 +13,8 @@
 import java.util.Collection;
 import java.util.List;
 
-import com.vsu.amm.medframe.model.dto.DevicePointDto;
-
 @Component
-public class DeviceMapper implements Mapper<Device, DeviceDto> {
+public class DeviceMapper implements Mapper<Device, DeviceResponse> {
 
     private static final Logger LOGGER = Logger.getLogger(DeviceMapper.class);
 
@@ -23,43 +22,44 @@
     private DevicePointMapper devicePointMapper;
 
     @Override
-    public Device mapToEntity(DeviceDto deviceDto) {
+    public Device mapToEntity(DeviceResponse deviceResponse) {
         Device device = new Device();
-        device.setId(deviceDto.getId());
-        device.setHeadphoneName(deviceDto.getHeadphoneName());
-        device.setSoundCardName(deviceDto.getSoundCardName());
-
-        device.setDevicePoints(mapPointDtoCollectionToPoint(deviceDto.getPointList()));
+        device.setId(deviceResponse.getId());
+        device.setHeadphoneName(deviceResponse.getHeadphoneName());
+        device.setSoundCardName(deviceResponse.getSoundCardName());
+//fix it
+        //device.setDevicePoints(mapPointDtoCollectionToPoint(deviceResponse.getPointList()));
         return device;
     }
 
     @Override
-    public DeviceDto mapToDto(Device device) {
-        DeviceDto dto = new DeviceDto();
+    public DeviceResponse mapToDto(Device device) {
+        DeviceResponse dto = new DeviceResponse();
         dto.setSoundCardName(device.getSoundCardName());
         dto.setId(device.getId());
         dto.setHeadphoneName(device.getHeadphoneName());
 
         if (device.getDevicePoints() != null && !device.getDevicePoints().isEmpty()) {
-            dto.setPointList(mapPointCollectionToDto(device.getDevicePoints()));
+            //fix it
+            //dto.setPointList(mapPointCollectionToDto(device.getDevicePoints()));
         } else {
             LOGGER.info("device don't have points");
         }
         return dto;
     }
 
-    private List<DevicePointDto> mapPointCollectionToDto(Collection<DevicePoint> points) {
-        List<DevicePointDto> pointDtos = new ArrayList<DevicePointDto>();
+    private List<DevicePointResponse> mapPointCollectionToDto(Collection<DevicePoint> points) {
+        List<DevicePointResponse> pointDtos = new ArrayList<DevicePointResponse>();
         for (DevicePoint point : points) {
-            DevicePointDto pointDto = devicePointMapper.mapToDto(point);
+            DevicePointResponse pointDto = devicePointMapper.mapToDto(point);
             pointDtos.add(pointDto);
         }
         return pointDtos;
     }
 
-    private List<DevicePoint> mapPointDtoCollectionToPoint(Collection<DevicePointDto> pointDtos) {
+    private List<DevicePoint> mapPointDtoCollectionToPoint(Collection<DevicePointResponse> pointDtos) {
         List<DevicePoint> points = new ArrayList<DevicePoint>();
-        for (DevicePointDto pointDto : pointDtos) {
+        for (DevicePointResponse pointDto : pointDtos) {
             DevicePoint point = devicePointMapper.mapToEntity(pointDto);
             points.add(point);
         }
Index: src/main/java/com/vsu/amm/medframe/component/sound/SoundPointsGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/vsu/amm/medframe/component/sound/SoundPointsGenerator.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/component/sound/SoundPointsGenerator.java	(revision )
@@ -1,6 +1,6 @@
 package com.vsu.amm.medframe.component.sound;
 
-import com.vsu.amm.medframe.model.dto.DevicePointDto;
+import com.vsu.amm.medframe.model.dto.DevicePointResponse;
 import com.vsu.amm.medframe.model.entity.Device;
 import com.vsu.amm.medframe.enums.BaseIntensityLevel;
 import com.vsu.amm.medframe.enums.Frequency;
@@ -21,8 +21,8 @@
     @Autowired
     private DevicePointService devicePointService;
 
-    public Collection<DevicePointDto> generatePoints(DevicePointDto startPoint) {
-        Collection<DevicePointDto> points = new ArrayList<DevicePointDto>();
+    public Collection<DevicePointResponse> generatePoints(DevicePointResponse startPoint) {
+        Collection<DevicePointResponse> points = new ArrayList<DevicePointResponse>();
 
         double amplitudeAtZeroIntensityLevel = startPoint.getSoundValue();
 
@@ -37,10 +37,10 @@
         return points;
     }
 
-    private Collection<DevicePointDto> generatePointsWithSomeAmplitude(Collection<DevicePointDto> points, double amplitude, BaseIntensityLevel intensityLevel) {
+    private Collection<DevicePointResponse> generatePointsWithSomeAmplitude(Collection<DevicePointResponse> points, double amplitude, BaseIntensityLevel intensityLevel) {
         for (Frequency frequency : Frequency.values()) {
             if (!frequency.equals(Frequency.NULL_VALUE)) {
-                DevicePointDto pointDto = new DevicePointDto();
+                DevicePointResponse pointDto = new DevicePointResponse();
                 pointDto.setIntensityLevel(intensityLevel.getValue());
                 pointDto.setFrequency(frequency.getValue());
                 pointDto.setSoundValue(amplitude);
@@ -51,25 +51,25 @@
     }
 
     public Device generateBasePoints(Device device) {
-        List<DevicePointDto> zeroIntensityLevelPoints = getZeroDevicePoints(device);
+        List<DevicePointResponse> zeroIntensityLevelPoints = getZeroDevicePoints(device);
 
-        for (DevicePointDto item : zeroIntensityLevelPoints) {
+        for (DevicePointResponse item : zeroIntensityLevelPoints) {
             generatePointForBaseIntensityLevelRange(item);
         }
         return device;
     }
 
-    private void generatePointForBaseIntensityLevelRange(DevicePointDto zeroPoint) {
+    private void generatePointForBaseIntensityLevelRange(DevicePointResponse zeroPoint) {
         for (BaseIntensityLevel intensityLevel : BaseIntensityLevel.values()) {
             if (!intensityLevel.equals(BaseIntensityLevel.ZERO_INTENSITY_VALUE)) {
-                DevicePointDto pointDto = generatePoint(intensityLevel.getValue(), zeroPoint);
+                DevicePointResponse pointDto = generatePoint(intensityLevel.getValue(), zeroPoint);
                 devicePointService.save(pointDto);
             }
         }
     }
 
-    private DevicePointDto generatePoint(int intensityLevel, DevicePointDto deviceZero) {
-        DevicePointDto pointDto = new DevicePointDto();
+    private DevicePointResponse generatePoint(int intensityLevel, DevicePointResponse deviceZero) {
+        DevicePointResponse pointDto = new DevicePointResponse();
         pointDto.setDeviceId(deviceZero.getDeviceId());
         pointDto.setFrequency(deviceZero.getFrequency());
         pointDto.setIntensityLevel(intensityLevel);
@@ -80,7 +80,7 @@
         return pointDto;
     }
 
-    private List<DevicePointDto> getZeroDevicePoints(Device device) {
+    private List<DevicePointResponse> getZeroDevicePoints(Device device) {
         return devicePointService.getZeroIntensityLevelDevicePoints(device.getId());
     }
 }
Index: src/main/java/com/vsu/amm/medframe/service/DevicePointService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/vsu/amm/medframe/service/DevicePointService.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/service/DevicePointService.java	(revision )
@@ -1,16 +1,16 @@
 package com.vsu.amm.medframe.service;
 
-import com.vsu.amm.medframe.model.dto.DevicePointDto;
+import com.vsu.amm.medframe.model.dto.DevicePointResponse;
 
 import java.util.List;
 
 public interface DevicePointService {
 
-    DevicePointDto save(DevicePointDto pointDto);
+    DevicePointResponse save(DevicePointResponse pointDto);
 
-    DevicePointDto getOne(Long id);
+    DevicePointResponse getOne(Long id);
 
-    List<DevicePointDto> getDevicePoints(Long deviceId);
+    List<DevicePointResponse> getDevicePoints(Long deviceId);
 
-    List<DevicePointDto> getZeroIntensityLevelDevicePoints(Long deviceId);
+    List<DevicePointResponse> getZeroIntensityLevelDevicePoints(Long deviceId);
 }
Index: src/main/java/com/vsu/amm/medframe/component/mapper/impl/DevicePointMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/vsu/amm/medframe/component/mapper/impl/DevicePointMapper.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/component/mapper/impl/DevicePointMapper.java	(revision )
@@ -1,7 +1,7 @@
 package com.vsu.amm.medframe.component.mapper.impl;
 
 import com.vsu.amm.medframe.component.mapper.Mapper;
-import com.vsu.amm.medframe.model.dto.DevicePointDto;
+import com.vsu.amm.medframe.model.dto.DevicePointResponse;
 import com.vsu.amm.medframe.model.entity.DevicePoint;
 import com.vsu.amm.medframe.enums.Frequency;
 import com.vsu.amm.medframe.repository.DeviceRepository;
@@ -12,7 +12,7 @@
 import java.math.BigDecimal;
 
 @Component
-public class DevicePointMapper implements Mapper<DevicePoint, DevicePointDto> {
+public class DevicePointMapper implements Mapper<DevicePoint, DevicePointResponse> {
 
     private static final Logger LOGGER = Logger.getLogger(DevicePointMapper.class);
 
@@ -20,7 +20,7 @@
     DeviceRepository deviceRepository;
 
     @Override
-    public DevicePoint mapToEntity(DevicePointDto pointDto) {
+    public DevicePoint mapToEntity(DevicePointResponse pointDto) {
         DevicePoint point = new DevicePoint();
         if (pointDto.getDeviceId() != null) {
             point.setDevice(deviceRepository.getOne(pointDto.getDeviceId()));
@@ -35,8 +35,8 @@
     }
 
     @Override
-    public DevicePointDto mapToDto(DevicePoint devicePoint) {
-        DevicePointDto dto = new DevicePointDto();
+    public DevicePointResponse mapToDto(DevicePoint devicePoint) {
+        DevicePointResponse dto = new DevicePointResponse();
 
         if (devicePoint.getId() != null) {
             dto.setId(devicePoint.getId());
Index: src/main/java/com/vsu/amm/medframe/service/DeviceService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/vsu/amm/medframe/service/DeviceService.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/service/DeviceService.java	(revision )
@@ -1,23 +1,24 @@
 package com.vsu.amm.medframe.service;
 
-import com.vsu.amm.medframe.model.dto.DeviceDto;
+import com.vsu.amm.medframe.model.dto.CreateDeviceRequest;
+import com.vsu.amm.medframe.model.dto.DeviceResponse;
 
 import java.util.List;
 
 public interface DeviceService {
 
-    DeviceDto save(DeviceDto dto);
+    DeviceResponse save(CreateDeviceRequest dto);
 
-    DeviceDto createNew();
+    DeviceResponse createNew();
 
-    DeviceDto getOne(Long id);
+    DeviceResponse getOne(Long id);
 
-    DeviceDto updateDevice(DeviceDto deviceDto);
+    DeviceResponse updateDevice(DeviceResponse deviceResponse);
 
-    List<DeviceDto> getAll();
+    List<DeviceResponse> getAll();
 
-    DeviceDto generateDevicePoints(Long deviceId);
+    DeviceResponse generateDevicePoints(Long deviceId);
 
-    DeviceDto generatedPointsAndSave(DeviceDto deviceDto);
+    DeviceResponse generatedPointsAndSave(DeviceResponse deviceResponse);
 
 }
Index: src/main/java/com/vsu/amm/medframe/service/impl/DeviceServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/vsu/amm/medframe/service/impl/DeviceServiceImpl.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/service/impl/DeviceServiceImpl.java	(revision )
@@ -2,8 +2,9 @@
 
 import com.vsu.amm.medframe.component.mapper.impl.DeviceMapper;
 import com.vsu.amm.medframe.component.sound.SoundPointsGenerator;
-import com.vsu.amm.medframe.model.dto.DeviceDto;
-import com.vsu.amm.medframe.model.dto.DevicePointDto;
+import com.vsu.amm.medframe.model.dto.CreateDeviceRequest;
+import com.vsu.amm.medframe.model.dto.DeviceResponse;
+import com.vsu.amm.medframe.model.dto.DevicePointResponse;
 import com.vsu.amm.medframe.model.entity.Device;
 import com.vsu.amm.medframe.model.entity.DevicePoint;
 import com.vsu.amm.medframe.repository.DevicePointRepository;
@@ -37,25 +38,28 @@
     private static final int ZERO_INTENSITY_1000HZ_POINT_NUMBER = 0;
 
     @Override
-    public DeviceDto generatedPointsAndSave(DeviceDto deviceDto) {
-        deviceDto.setPointList(
-                (List<DevicePointDto>) soundPointsGenerator.generatePoints(
-                        deviceDto.getPointList().get(ZERO_INTENSITY_1000HZ_POINT_NUMBER)));
-        log.info(deviceDto.getPointList().toString());
-        deviceDto = save(deviceDto);
-        return deviceDto;
+    public DeviceResponse generatedPointsAndSave(DeviceResponse deviceResponse) {
+        //TODO fix it
+//        deviceResponse.setPoints(
+//                (List<DevicePointResponse>) soundPointsGenerator.generatePoints(
+//                        deviceResponse.setPoints().get(ZERO_INTENSITY_1000HZ_POINT_NUMBER)));
+//        log.info(deviceResponse.setPoints().toString());
+
+        // deviceResponse = save(deviceResponse);
+        return deviceResponse;
     }
 
     @Override
-    public DeviceDto createNew() {
+    public DeviceResponse createNew() {
         Device device = new Device();
         device = deviceRepository.saveAndFlush(device);
         return mapper.mapToDto(device);
     }
 
     @Override
-    public DeviceDto save(DeviceDto dto) {
-        Device device = mapper.mapToEntity(dto);
+    public DeviceResponse save(CreateDeviceRequest dto) {
+        Device device = new Device();//TODO fix it
+        // mapper.mapToEntity(dto);
         if (device.getDevicePoints() != null && !device.getDevicePoints().isEmpty()) {
             // TODO to fix it on bulk case
             List<DevicePoint> points = device.getDevicePoints();
@@ -76,40 +80,40 @@
     }
 
     @Override
-    public DeviceDto getOne(Long id) {
+    public DeviceResponse getOne(Long id) {
         Device device = deviceRepository.findDeviceWithPointsByIdQuery(id);
         return mapper.mapToDto(device);
     }
 
     @Override
-    public List<DeviceDto> getAll() {
+    public List<DeviceResponse> getAll() {
         List<Device> devices = deviceRepository.findAll();
         if (devices == null || devices.isEmpty()) {
             return Collections.EMPTY_LIST;
         }
-        List<DeviceDto> deviceDos = new ArrayList<DeviceDto>();
+        List<DeviceResponse> deviceDos = new ArrayList<DeviceResponse>();
         for (Device device : devices) {
-            DeviceDto deviceDto = mapper.mapToDto(device);
-            deviceDos.add(deviceDto);
+            DeviceResponse deviceResponse = mapper.mapToDto(device);
+            deviceDos.add(deviceResponse);
         }
         return deviceDos;
     }
 
     @Override
-    public DeviceDto updateDevice(DeviceDto deviceDto) {
-        Device device = deviceRepository.getOne(deviceDto.getId());
-        if (!device.getHeadphoneName().equals(deviceDto.getHeadphoneName())) {
-            device.setHeadphoneName(deviceDto.getHeadphoneName());
+    public DeviceResponse updateDevice(DeviceResponse deviceResponse) {
+        Device device = deviceRepository.getOne(deviceResponse.getId());
+        if (!device.getHeadphoneName().equals(deviceResponse.getHeadphoneName())) {
+            device.setHeadphoneName(deviceResponse.getHeadphoneName());
         }
-        if (!device.getSoundCardName().equals(deviceDto.getSoundCardName())) {
-            device.setSoundCardName(deviceDto.getSoundCardName());
+        if (!device.getSoundCardName().equals(deviceResponse.getSoundCardName())) {
+            device.setSoundCardName(deviceResponse.getSoundCardName());
         }
         device = deviceRepository.saveAndFlush(device);
         return mapper.mapToDto(device);
     }
 
     @Override
-    public DeviceDto generateDevicePoints(Long deviceId) {
+    public DeviceResponse generateDevicePoints(Long deviceId) {
         Device device = deviceRepository.findOne(deviceId);
         device = soundPointsGenerator.generateBasePoints(device);
         device = deviceRepository.saveAndFlush(device);
Index: src/main/java/com/vsu/amm/medframe/model/dto/DevicePointDto.java
===================================================================
--- src/main/java/com/vsu/amm/medframe/model/dto/DevicePointDto.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/model/dto/DevicePointDto.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
@@ -1,65 +0,0 @@
-package com.vsu.amm.medframe.model.dto;
-
-public class DevicePointDto {
-
-    protected Long id;
-
-    protected int frequency;
-
-    protected int intensityLevel;
-
-    private Long deviceId;
-
-    private double soundValue;
-
-    public Long getDeviceId() {
-        return deviceId;
-    }
-
-    public void setDeviceId(Long deviceId) {
-        this.deviceId = deviceId;
-    }
-
-    public double getSoundValue() {
-        return soundValue;
-    }
-
-    public void setSoundValue(double soundLevel) {
-        this.soundValue = soundLevel;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public int getFrequency() {
-        return frequency;
-    }
-
-    public void setFrequency(int frequency) {
-        this.frequency = frequency;
-    }
-
-    public int getIntensityLevel() {
-        return intensityLevel;
-    }
-
-    public void setIntensityLevel(int intensityLevel) {
-        this.intensityLevel = intensityLevel;
-    }
-
-    @Override
-    public String toString() {
-        return "DevicePointDto{" +
-                "id=" + (id != null ? id : " is empty") +
-                ", deviceId=" + (deviceId != null ? deviceId : " is empty") +
-                ", frequency=" + frequency +
-                ", intensityLevel=" + intensityLevel +
-                ", soundValue=" + soundValue +
-                '}';
-    }
-}
Index: src/main/java/com/vsu/amm/medframe/model/dto/DeviceDto.java
===================================================================
--- src/main/java/com/vsu/amm/medframe/model/dto/DeviceDto.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/model/dto/DeviceResponse.java	(revision )
@@ -1,17 +1,13 @@
 package com.vsu.amm.medframe.model.dto;
 
-import java.util.ArrayList;
-import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
 
-public class DeviceDto {
+public class DeviceResponse extends AbstractDeviceDto{
 
     private Long id;
 
-    private String soundCardName;
-
-    private String headphoneName;
-
-    private List<DevicePointDto> pointList = new ArrayList<DevicePointDto>();
+    private Set<DevicePointResponse> points = new TreeSet<DevicePointResponse>();
 
     public Long getId() {
         return id;
@@ -21,37 +17,21 @@
         this.id = id;
     }
 
-    public String getSoundCardName() {
-        return soundCardName;
+    public Set<DevicePointResponse> getPoints() {
+        return points;
     }
 
-    public void setSoundCardName(String soundCardName) {
-        this.soundCardName = soundCardName;
-    }
-
-    public String getHeadphoneName() {
-        return headphoneName;
-    }
-
-    public void setHeadphoneName(String headphoneName) {
-        this.headphoneName = headphoneName;
-    }
-
-    public List<DevicePointDto> getPointList() {
-        return pointList;
-    }
-
-    public void setPointList(List<DevicePointDto> pointList) {
-        this.pointList = pointList;
+    public void setPoints(Set<DevicePointResponse> points) {
+        this.points = points;
     }
 
     @Override
     public String toString() {
-        return "DeviceDto{" +
+        return "DeviceResponse{" +
                 "id=" + id +
                 ", soundCardName='" + soundCardName + '\'' +
                 ", headphoneName='" + headphoneName + '\'' +
-                ", pointList=" + pointList +
+                ", pointList=" + points.toString() +
                 '}';
     }
 }
Index: src/main/java/com/vsu/amm/medframe/component/sound/SoundUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/vsu/amm/medframe/component/sound/SoundUtils.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/component/sound/SoundUtils.java	(revision )
@@ -1,6 +1,6 @@
 package com.vsu.amm.medframe.component.sound;
 
-import com.vsu.amm.medframe.model.dto.DevicePointDto;
+import com.vsu.amm.medframe.model.dto.DevicePointResponse;
 import com.vsu.amm.medframe.enums.BaseIntensityLevel;
 import org.apache.log4j.Logger;
 
@@ -29,7 +29,7 @@
 
     //private static double
 
-    static Double calculateSoundVolume(Integer intensityLevel, DevicePointDto intensityZero) {
+    static Double calculateSoundVolume(Integer intensityLevel, DevicePointResponse intensityZero) {
 
         return calculateDeltaVolume(intensityLevel)*intensityZero.getSoundValue();
         //return 0.01;
Index: src/main/java/com/vsu/amm/medframe/model/dto/DevicePointResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/vsu/amm/medframe/model/dto/DevicePointResponse.java	(revision )
+++ src/main/java/com/vsu/amm/medframe/model/dto/DevicePointResponse.java	(revision )
@@ -0,0 +1,64 @@
+package com.vsu.amm.medframe.model.dto;
+
+public class DevicePointResponse extends AbstractDevicePointDto implements Comparable{
+
+    private Long id;
+
+    private Long deviceId;
+
+    public Long getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Long deviceId) {
+        this.deviceId = deviceId;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    @Override
+    public String toString() {
+        return "DevicePointResponse{" +
+                "frequency=" + frequency +
+                ", id=" + id +
+                ", intensityLevel=" + intensityLevel +
+                ", deviceId=" + deviceId +
+                ", soundValue=" + soundValue +
+                '}';
+    }
+
+    @Override
+    public int compareTo(Object o) {
+        int MORE = 1;
+        int LESS = -1;
+        int EQUAL = 0;
+
+        DevicePointResponse response = (DevicePointResponse) o;
+
+        if(this.id.equals(response.deviceId)) {
+            return EQUAL;
+        }
+
+        if (!this.deviceId.equals(response.deviceId)) {
+            return LESS;
+        }
+
+        if(this.intensityLevel > response.intensityLevel
+                && this.soundValue > response.soundValue) {
+            return MORE;
+        } else if(this.intensityLevel < response.intensityLevel
+                && this.soundValue < response.soundValue) {
+            return LESS;
+        } else if(this.intensityLevel == response.intensityLevel) {
+            return EQUAL;
+        }
+
+        return MORE;
+    }
+}
\ No newline at end of file
Index: src/main/java/com/vsu/amm/medframe/controller/ConfigurationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/vsu/amm/medframe/controller/ConfigurationController.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/controller/ConfigurationController.java	(revision )
@@ -1,6 +1,6 @@
 package com.vsu.amm.medframe.controller;
 
-import com.vsu.amm.medframe.model.dto.DeviceDto;
+import com.vsu.amm.medframe.model.dto.DeviceResponse;
 import com.vsu.amm.medframe.enums.Frequency;
 import com.vsu.amm.medframe.service.DevicePointService;
 import com.vsu.amm.medframe.service.DeviceService;
@@ -65,8 +65,8 @@
     @RequestMapping(value = "/devices/{deviceId}", method = GET)
     public String getDevice(@PathVariable("deviceId") Long deviceId,
                             ModelMap modelMap) {
-        DeviceDto deviceDto = deviceService.getOne(deviceId);
-        modelMap.addAttribute("device", deviceDto);
+        DeviceResponse deviceResponse = deviceService.getOne(deviceId);
+        modelMap.addAttribute("device", deviceResponse);
         return "getDevice";
     }
 
@@ -77,7 +77,7 @@
     }
 
     @RequestMapping(value = "/devices/add", method = POST)
-    public String addDevice(@RequestBody DeviceDto dto) {
+    public String addDevice(@RequestBody DeviceResponse dto) {
         deviceService.save(dto);
         return "redirect:/templates";
     }
Index: src/main/java/com/vsu/amm/medframe/service/impl/DevicePointServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/vsu/amm/medframe/service/impl/DevicePointServiceImpl.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/service/impl/DevicePointServiceImpl.java	(revision )
@@ -1,7 +1,7 @@
 package com.vsu.amm.medframe.service.impl;
 
 import com.vsu.amm.medframe.component.mapper.impl.DevicePointMapper;
-import com.vsu.amm.medframe.model.dto.DevicePointDto;
+import com.vsu.amm.medframe.model.dto.DevicePointResponse;
 import com.vsu.amm.medframe.model.entity.DevicePoint;
 import com.vsu.amm.medframe.repository.DevicePointRepository;
 import com.vsu.amm.medframe.service.DevicePointService;
@@ -25,27 +25,27 @@
     DevicePointMapper mapper;
 
     @Override
-    public DevicePointDto save(DevicePointDto pointDto) {
+    public DevicePointResponse save(DevicePointResponse pointDto) {
         DevicePoint point = mapper.mapToEntity(pointDto);
         point = devicePointRepository.saveAndFlush(point);
         return mapper.mapToDto(point);
     }
 
     @Override
-    public DevicePointDto getOne(Long id) {
+    public DevicePointResponse getOne(Long id) {
         DevicePoint point = devicePointRepository.getOne(id);
         return mapper.mapToDto(point);
     }
 
     @Override
-    public List<DevicePointDto> getDevicePoints(Long deviceId) {
+    public List<DevicePointResponse> getDevicePoints(Long deviceId) {
         List<DevicePoint> points = (List<DevicePoint>) devicePointRepository.findByDeviceId(deviceId);
         if (points == null || points.isEmpty()) {
             return Collections.EMPTY_LIST;
         }
-        List<DevicePointDto> pointDtos = new ArrayList<DevicePointDto>();
+        List<DevicePointResponse> pointDtos = new ArrayList<DevicePointResponse>();
         for (DevicePoint point : points) {
-            DevicePointDto pointDto = mapper.mapToDto(point);
+            DevicePointResponse pointDto = mapper.mapToDto(point);
             pointDtos.add(pointDto);
         }
         LOGGER.info(pointDtos.toString());
@@ -53,14 +53,14 @@
     }
 
     @Override
-    public List<DevicePointDto> getZeroIntensityLevelDevicePoints(Long deviceId) {
+    public List<DevicePointResponse> getZeroIntensityLevelDevicePoints(Long deviceId) {
         List<DevicePoint> devicePoints = (List<DevicePoint>) devicePointRepository.getZeroIntensityLevelDevicePointsByDeviceId(deviceId);
         if (devicePoints == null || devicePoints.isEmpty()) {
             return Collections.EMPTY_LIST;
         }
-        List<DevicePointDto> pointDtos = new ArrayList<DevicePointDto>();
+        List<DevicePointResponse> pointDtos = new ArrayList<DevicePointResponse>();
         for (DevicePoint point : devicePoints) {
-            DevicePointDto pointDto = mapper.mapToDto(point);
+            DevicePointResponse pointDto = mapper.mapToDto(point);
             pointDtos.add(pointDto);
         }
         LOGGER.info(pointDtos.toString());
Index: src/main/java/com/vsu/amm/medframe/controller/ConfigurationRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/vsu/amm/medframe/controller/ConfigurationRestController.java	(revision 6edc5516a1266aa13683b368540a4c3640699ffc)
+++ src/main/java/com/vsu/amm/medframe/controller/ConfigurationRestController.java	(revision )
@@ -1,7 +1,7 @@
 package com.vsu.amm.medframe.controller;
 
-import com.vsu.amm.medframe.model.dto.DeviceDto;
-import com.vsu.amm.medframe.model.dto.DevicePointDto;
+import com.vsu.amm.medframe.model.dto.DevicePointResponse;
+import com.vsu.amm.medframe.model.dto.DeviceResponse;
 import com.vsu.amm.medframe.service.DevicePointService;
 import com.vsu.amm.medframe.service.DeviceService;
 import org.apache.log4j.Logger;
@@ -31,41 +31,18 @@
 
 
     @RequestMapping(value="/devices/new", method = GET)
-    public DeviceDto getAddDeviceForm(@RequestBody DeviceDto deviceDto) {
-        return deviceService.generatedPointsAndSave(deviceDto);
-    }
-
-    @RequestMapping(value = "/devices", method = PUT)
-    public DeviceDto create(@RequestBody DeviceDto deviceDto) {
-        deviceDto = deviceService.save(deviceDto);
-        return deviceDto;
-    }
-
-    @RequestMapping(value = "/devices/{deviceID}", method = PUT)
-    public DevicePointDto createPoint(@PathVariable Long deviceID,
-                                      @RequestBody @Valid DevicePointDto pointDto) {
-        return devicePointService.save(pointDto);
-    }
-
-    @RequestMapping(value = "/devices/{deviceId}", method = GET)
-    public DeviceDto getDevice(@PathVariable("deviceId") Long deviceID) {
-        return deviceService.getOne(deviceID);
+    public DeviceResponse getAddDeviceForm(@RequestBody DeviceResponse deviceResponse) {
+        return deviceService.generatedPointsAndSave(deviceResponse);
     }
 
     @RequestMapping(value = "/devices/{deviceId}/{devicePointId}", method = GET)
-    public DevicePointDto getDevicePoint(@PathVariable("deviceId") Long deviceID,
-                                         @PathVariable("devicePointId") Long devicePointId) {
+    public DevicePointResponse getDevicePoint(@PathVariable("deviceId") Long deviceID,
+                                              @PathVariable("devicePointId") Long devicePointId) {
         return devicePointService.getOne(devicePointId);
     }
 
-    @RequestMapping(value = "/devices/{deviceId}", method = POST)
-    public DeviceDto updateDevice(@PathVariable("deviceId") Long deviceID,
-                                  @RequestBody DeviceDto deviceDto) {
-        return deviceService.updateDevice(deviceDto);
-    }
-
     @RequestMapping(value = "/devices/{deviceId}/generate/allpoints", method = POST)
-    public DeviceDto generatePointsForFullFrequencies(@PathVariable("deviceId") Long deviceID) {
+    public DeviceResponse generatePointsForFullFrequencies(@PathVariable("deviceId") Long deviceID) {
         return deviceService.generateDevicePoints(deviceID);
     }
 }
